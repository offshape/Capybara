package frc.robot.generated

import com.ctre.phoenix6.configs.Slot0Configs
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.util.Units
import frc.robot.subsystems.drivetrain.CommandSwerveDrivetrain

// Generated by the Tuner X Swerve Project Generator and InteliJ IDEA
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs = Slot0Configs()
        .withKP(75.0).withKI(0.0).withKD(0.2)
        .withKS(0.0).withKV(1.5).withKA(0.0)

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs = Slot0Configs()
        .withKP(2.8).withKI(0.0).withKD(0.0)
        .withKS(0.0).withKV(0.0).withKA(0.0)

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val steerClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val driveClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private const val kSlipCurrentA = 40.0

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    const val kSpeedAt12VoltsMps: Double = 6.21

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio = 3.0

    private const val kDriveGearRatio = 5.142857142857142
    private const val kSteerGearRatio = 12.8
    private const val kWheelRadiusInches = 2.0

    private const val kSteerMotorReversed = false
    private const val kInvertLeftSide = true
    private const val kInvertRightSide = false

    private const val kCANbusName = ""
    private const val kPigeonId = 2

    // These are only used for simulation
    private const val kSteerInertia = 0.00001
    private const val kDriveInertia = 0.001

    // Simulated voltage necessary to overcome friction
    private const val kSteerFrictionVoltage = 0.25
    private const val kDriveFrictionVoltage = 0.25

    private val DrivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants()
        .withPigeon2Id(kPigeonId)
        .withCANbusName(kCANbusName)

    private val ConstantCreator: SwerveModuleConstantsFactory = SwerveModuleConstantsFactory()
        .withDriveMotorGearRatio(kDriveGearRatio)
        .withSteerMotorGearRatio(kSteerGearRatio)
        .withWheelRadius(kWheelRadiusInches)
        .withSlipCurrent(kSlipCurrentA)
        .withSteerMotorGains(steerGains)
        .withDriveMotorGains(driveGains)
        .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
        .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
        .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
        .withSteerInertia(kSteerInertia)
        .withDriveInertia(kDriveInertia)
        .withSteerFrictionVoltage(kSteerFrictionVoltage)
        .withDriveFrictionVoltage(kDriveFrictionVoltage)
        .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
        .withCouplingGearRatio(kCoupleRatio)
        .withSteerMotorInverted(kSteerMotorReversed)


    // Front Left
    private const val kFrontLeftDriveMotorId = 10
    private const val kFrontLeftSteerMotorId = 9
    private const val kFrontLeftEncoderId = 11
    private const val kFrontLeftEncoderOffset = -0.04931640625

    private const val kFrontLeftXPosInches = 9.75
    private const val kFrontLeftYPosInches = 9.75

    // Front Right
    private const val kFrontRightDriveMotorId = 13
    private const val kFrontRightSteerMotorId = 12
    private const val kFrontRightEncoderId = 14
    private const val kFrontRightEncoderOffset = 0.06201171875

    private const val kFrontRightXPosInches = 9.75
    private const val kFrontRightYPosInches = -9.75

    // Back Left
    private const val kBackLeftDriveMotorId = 7
    private const val kBackLeftSteerMotorId = 6
    private const val kBackLeftEncoderId = 8
    private const val kBackLeftEncoderOffset = -0.08984375

    private const val kBackLeftXPosInches = -9.75
    private const val kBackLeftYPosInches = 9.75

    // Back Right
    private const val kBackRightDriveMotorId = 4
    private const val kBackRightSteerMotorId = 3
    private const val kBackRightEncoderId = 5
    private const val kBackRightEncoderOffset = -0.042724609375

    private const val kBackRightXPosInches = -9.75
    private const val kBackRightYPosInches = -9.75


    private val FrontLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kFrontLeftSteerMotorId,
        kFrontLeftDriveMotorId,
        kFrontLeftEncoderId,
        kFrontLeftEncoderOffset,
        Units.inchesToMeters(
            kFrontLeftXPosInches
        ),
        Units.inchesToMeters(kFrontLeftYPosInches),
        kInvertLeftSide
    )
    private val FrontRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kFrontRightSteerMotorId,
        kFrontRightDriveMotorId,
        kFrontRightEncoderId,
        kFrontRightEncoderOffset,
        Units.inchesToMeters(
            kFrontRightXPosInches
        ),
        Units.inchesToMeters(kFrontRightYPosInches),
        kInvertRightSide
    )
    private val BackLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, Units.inchesToMeters(
            kBackLeftXPosInches
        ), Units.inchesToMeters(kBackLeftYPosInches), kInvertLeftSide
    )
    private val BackRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kBackRightSteerMotorId,
        kBackRightDriveMotorId,
        kBackRightEncoderId,
        kBackRightEncoderOffset,
        Units.inchesToMeters(
            kBackRightXPosInches
        ),
        Units.inchesToMeters(kBackRightYPosInches),
        kInvertRightSide
    )

    val DriveTrain: CommandSwerveDrivetrain = CommandSwerveDrivetrain(
        DrivetrainConstants, FrontLeft,
        FrontRight, BackLeft, BackRight
    )
}